generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------- USER & PROFILE --------------------

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  role          String    @default("user") 
  isActive      Boolean   @default(true)
  isVerified    Boolean   @default(false)
  createdByUserId String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  profile       Profile?  @relation("UserProfile")

  salesOrders   SalesOrder[]
  shipments     Shipment[]        @relation("ShipmentCreatedBy")
  createdDistributor Distributor[] @relation("DistributorCreatedBy")
  updatedDistributor Distributor[] @relation("DistributorUpdatedBy")

  @@index([isActive])
  @@map("user")
}

model Profile {
  id          String   @id @default(uuid())
  user        User     @relation("UserProfile", fields: [userId], references: [id])
  userId      String   @unique

  firstName   String
  lastName    String
  otherNames  String?
  gender      String?
  dateOfBirth DateTime?
  phone       String?
}

// -------------------- DISTRIBUTOR --------------------

model Distributor {
  id          String   @id @default(uuid())
  name        String
  type        DistributorType
  email       String?   @unique
  phone       String?
  address     String?
  isActive    Boolean   @default(true)

  creditLimit Float?    @default(0)
  currency    Currency  @default(NGN)

  salesOrders SalesOrder[]
  payments    Payment[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   User?    @relation("DistributorCreatedBy", fields: [createdById], references: [id])
  createdById String?

  updatedBy   User?    @relation("DistributorUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?
}

// -------------------- MEDICINE & SHIPMENT --------------------

model Medicine {
  id          String         @id @default(uuid())
  name        String
  strength    String?        
  form        String?       
  manufacturer String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  shipmentItems ShipmentItem[]

  SalesItem SalesItem[]
}

model Shipment {
  id                 String        @id @default(uuid())
  status             StockMovementType @default(IN)
  deliveryStatus   String        @default("pending")
  proformaInvoiceNo  String
  billOfLading       String
  supplier           String
  receivedDate       DateTime?
  documents          Json?        
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  items              ShipmentItem[]

  createdBy   User?  @relation("ShipmentCreatedBy", fields: [createdById], references: [id])
  createdById String?
}

model ShipmentItem {
  id           String    @id @default(uuid())
  shipmentId   String
  medicineId   String
  batchNumber  String
  expiryDate   DateTime
  quantity     Int
  unitCost     Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  shipment     Shipment   @relation(fields: [shipmentId], references: [id])
  medicine     Medicine   @relation(fields: [medicineId], references: [id])
}

// -------------------- SALES --------------------

model SalesOrder {
  id            String      @id @default(uuid())
  distributor   Distributor @relation(fields: [distributorId], references: [id])
  distributorId String

  salesRep      User        @relation(fields: [salesRepId], references: [id])
  salesRepId    String

  currency      Currency    @default(NGN)
  paymentStatus PaymentStatus @default(PENDING)

  items         SalesItem[]
  payments      Payment[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SalesItem {
  id            String      @id @default(uuid())
  salesOrderId  String
  medicineId    String
  quantity      Int
  unitPrice     Float

  salesOrder    SalesOrder  @relation(fields: [salesOrderId], references: [id])
  medicine      Medicine    @relation(fields: [medicineId], references: [id])
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  currency    Currency
  type        PaymentType 
  entityType  String    
  entityId    String

  distributor Distributor? @relation(fields: [distributorId], references: [id])
  distributorId String?

  salesOrder  SalesOrder? @relation(fields: [salesOrderId], references: [id])
  salesOrderId String?

  createdAt   DateTime @default(now())
}

enum DistributorType {
  WHOLESALER
  HOSPITAL
  PHARMACY
  CLINIC
  NGO
  CHEMIST
}

enum Currency {
  NGN
  USD
}

enum PaymentType {
  CASH
  CREDIT
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
}

enum StockMovementType {
  IN
  OUT
}

// -------------------- TOKENS --------------------

model PasswordResetToken {
  email     String
  token     String   @id
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model BlacklistedToken {
  token     String   @id
  createdAt DateTime @default(now())
  expiresAt DateTime
}
